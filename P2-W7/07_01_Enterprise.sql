/**
  Applications on DML and constraints
 */

-- Question 1
-- TODO

-- Question 2
-- EX. 1
INSERT INTO departments (department_id, department_name, manager_id)
VALUES ('15', 'Human Resources', '999999999');

INSERT INTO locations (department_id, location)
VALUES ('15', 'Antwerpen');

-- EX. 2
INSERT INTO employees (employee_id, last_name, first_name, gender)
VALUES ('999999999', 'Janssens', 'Jan', 'M');

UPDATE employees
SET department_id=15
WHERE employee_id = '999999999';

-- EX. 3
INSERT INTO projects (project_id, project_name, location, department_id)
VALUES ('40', 'Opleidingen', 'Antwerpen', '15');

-- EX. 4
UPDATE employees
SET manager_id='999999999'
WHERE employee_id = '999333333';
UPDATE employees
SET manager_id='999333333'
WHERE employee_id = '999111111';

-- EX. 5
INSERT INTO tasks (employee_id, project_id, hours)
VALUES (999333333, '40', '20'),
       (999111111, '40', '10');

/**
  Modifying table structure - deleting tables
 */

-- EX. 3
ALTER TABLE IF EXISTS departments
    ALTER department_name SET DATA TYPE VARCHAR(25);

-- EX. 4
ALTER TABLE IF EXISTS projects
    ADD CONSTRAINT ch_prj_name CHECK ( project_name = upper(project_name) ) NOT VALID;
ALTER TABLE projects
    VALIDATE CONSTRAINT ch_prj_name;

-- EX. 5
CREATE OR REPLACE FUNCTION add_column_and_update()
    RETURNS VOID AS
$$
BEGIN
    ALTER TABLE employees
        ADD COLUMN email VARCHAR(20) NOT NULL DEFAULT 'unknown';
    UPDATE employees SET email = 'unknown' WHERE email = '';
END;
$$ LANGUAGE plpgsql;

SELECT add_column_and_update();

-- EX. 6
ALTER TABLE departments
    ALTER department_name DROP NOT NULL;

-- EX. 7
ALTER TABLE employees
    DROP email;

-- EX. 8
ALTER TABLE projects
    DROP CONSTRAINT ch_prj_name;

-- EX. 9
ALTER TABLE family_members
    DROP constraint c_gender;
ALTER TABLE family_members
    ADD CONSTRAINT c_gender CHECK ( gender ILIKE ANY ('{f,m}'));

-- EX. 10
ALTER TABLE departments
    ADD CONSTRAINT fk_shit FOREIGN KEY (manager_id) REFERENCES employees (employee_id);

/*
 Application of creation and retrieval of sequence numbers
 */

-- EX. 12A
SELECT max(department_id)
FROM departments;

CREATE SEQUENCE seq_department_id START WITH 8 INCREMENT BY 1;

SELECT currval('seq_department_id');

-- EX. 12B
SELECT max(project_id)
FROM projects;
CREATE SEQUENCE seq_project_id START WITH 40 INCREMENT BY 10;

SELECT currval('seq_project_id');
SELECT nextval('seq_project_id');

-- EX. 13
INSERT INTO departments (department_id, department_name)
VALUES (nextval('seq_department_id'), 'Financieringen');

-- EX. 14
INSERT INTO projects (project_id, project_name, department_id)
VALUES (nextval('seq_project_id'), 'CREDITEUREN', currval('seq_department_id'));

/*
 Applications on the use of identity columns
 */

-- EX. 15
SELECT department_id
FROM departments
ORDER BY department_id desc FETCH FIRST ROW ONLY;

-- EX. 16
ALTER TABLE departments
    ADD COLUMN department_id_new INT GENERATED BY DEFAULT AS IDENTITY (START WITH 8);

-- EX. 17
UPDATE departments
SET department_id_new = department_id;

-- EX. 18
ALTER TABLE departments
    DROP CONSTRAINT pk_departments CASCADE;

-- EX. 19
ALTER TABLE departments
    DROP department_id;

-- EX. 20
ALTER TABLE departments
    RENAME department_id_new TO department_id;

-- EX. 21
ALTER TABLE departments
    ADD CONSTRAINT pk_dep_id PRIMARY KEY (department_id);

-- EX. 22
INSERT INTO departments (department_name)
VALUES ('ICT')
